#!/bin/bash

while getopts fh OPT
do
  case $OPT in
    "f") FLAG_FORCE="TRUE" ;;
    "h") FLAG_HELP="TRUE" ;;
    * ) FLAG_HELP="TRUE" ;;
  esac
done
shift `expr $OPTIND - 1`

TARGET_VERSION="$1"
LOCATION="$2"
OS="$3"
ARCH="$4"

if [ "x"$FLAG_HELP != "x" -o "x$LOCATION" = "x" ]; then
  echo "[usage] go-install [-f] VERSION LOCATION"
  echo "  ex: go-install 1.3.3 ~/local/go-1.3.3"
  echo "  ex: go-install 1.3.3 ~/local/go-1.3.3 linux amd64"
  echo "  default os is 'linux'"
  echo "  default arch is 'amd64'"
  exit 0
fi

if [ "x$OS" = "x" ]; then
  OS="linux"
fi

if [ "x$ARCH" = "x" ]; then
  ARCH="amd64"
fi

cd $(dirname $0)

if [ "x"$FLAG_FORCE = "x" -a -d "$LOCATION" -a -x "$LOCATION/bin/go" ]; then
  current_ver=$("$LOCATION"/bin/go version)
  expected_ver="$TARGET_VERSION $OS/$ARCH"
  hit=$(echo $current_ver | grep "$expected_ver")
  if [ "x$hit" != "x" ]; then
    echo "go $TARGET_VERSION already installed on $LOCATION"
    echo "To do force re-install, use '-f' option"
    exit 0
  fi
fi

ARCHIVE_FILENAME="go$TARGET_VERSION.$OS-$ARCH.tar.gz"
DL_GOLANG_ORG="https://storage.googleapis.com/golang"

echo "Start to install go $TARGET_VERSION ..."

set -e

mkdir -p $LOCATION

curl -s $DL_GOLANG_ORG/$ARCHIVE_FILENAME | tar -C $LOCATION -xzf -
cp -a $LOCATION/go/* $LOCATION/
rm -rf $LOCATION/go

echo "go $TARGET_VERSION successfully installed on $LOCATION"
echo "To use this go, do 'export PATH=$LOCATION/bin:\$PATH' and 'export GOROOT=$LOCATION'."
